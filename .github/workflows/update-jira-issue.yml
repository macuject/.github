name: Update Jira Issue

on:
  workflow_call:
    secrets:
      JIRA_BASE_URL:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true

jobs:
  # On merge of Dependabot PR
  # - Check fixVersion is set correctly, and if not, update it
  # - Transition issue to 'Done'
  update_dependabot_issue_on_pr_merge:
    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.event.pull_request.merged == true # Dependabot is the author & PR is merged
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Log JIRA_BASE_URL
        run: |
          echo "JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}"

      - name: Extract issue key from pull request title
        id: extract_keys
        run: |
          echo "issue_key=$(echo ${{ github.event.pull_request.title }} | cut -d ':' -f1)" >> $GITHUB_OUTPUT
          echo "project_key=$(echo ${{ github.event.pull_request.title }} | cut -d '-' -f1)" >> $GITHUB_OUTPUT

      - name: Log issue key and project key
        run: |
          echo "Issue key: ${{ steps.extract_keys.outputs.issue_key }}"
          echo "Project key: ${{ steps.extract_keys.outputs.project_key }}"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history so that we can get the release branch names
          path: current_repo

      - name: Get release branch names
        id: get_release_branch_names
        run: |
          all_branches=$(git branch -r --format='%(refname:short)')
          release_branches=$(echo "$all_branches" | grep -E 'release/.*0$' | tr '\n' ',' | sed 's/,$//')
          echo "release_branches=$release_branches" >> $GITHUB_OUTPUT
        working-directory: current_repo

      - name: Log release branch names
        run: echo "Release branch names ${{ steps.get_release_branch_names.outputs.release_branches }}"

      # Prevent dependency conflicts
      - name: Delete current_repo
        run: rm -rf current_repo

      - name: Checkout code from macuject/.github repo
        uses: actions/checkout@v3
        with:
          repository: macuject/.github
          path: reusable

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install node-fetch
        working-directory: reusable

      - name: Run script
        run: node reusable/.github/workflows/release-version.mjs
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY: ${{ steps.extract_keys.outputs.issue_key }}
          PROJECT_KEY: ${{ steps.extract_keys.outputs.project_key }}
          GITHUB_RELEASE_BRANCHES: ${{ steps.get_release_branch_names.outputs.release_branches }}
          PR_BASE_BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: Transition Jira ticket to Done
        uses: atlassian/gajira-transition@v3
        with:
          issue: ${{ steps.extract_keys.outputs.issue_key }}
          transition: Done

  # On merge of non-Dependabot PR
  # - Check fixVersion is set correctly, and if not, update it
  # - Add a comment to the associated Jira issue(s) with the PR's Description
  update_jira_issue_on_pr_merge:
    if: github.event.pull_request.user.login != 'dependabot[bot]' && github.event.pull_request.merged == true # Dependabot is NOT the author & PR is merged
    runs-on: ubuntu-latest
    steps:
      - name: Validate pull request title
        id: validate_pr_title
        run: |
          if [[ "${{ github.event.pull_request.title }}" =~ ^\[?([A-Z]{2,4}-[0-9]{2,5}(,\s)?)+\]?:|^([A-Z]{2,4}-[0-9]{2,5}): ]]; then
            echo "PR title is valid"
          else
            echo "Invalid PR title format. It should start with a Jira issue key."
            echo "ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ MANUAL FIX NEEDED ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡"
            echo "Unfortunately, fixing the PR title and re-running the action won't work, so you'll need to manually update the Jira issue."
            exit 1
          fi

      - name: Log in to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Log JIRA_BASE_URL
        run: |
          echo "JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}"

      - name: Extract issue key from pull request title
        id: extract_keys
        run: |
          echo "issue_key=$(echo ${{ github.event.pull_request.title }} | cut -d ':' -f1)" >> $GITHUB_OUTPUT
          echo "project_key=$(echo ${{ github.event.pull_request.title }} | cut -d '-' -f1)" >> $GITHUB_OUTPUT

      - name: Log issue key and project key
        run: |
          echo "Issue key: ${{ steps.extract_keys.outputs.issue_key }}"
          echo "Project key: ${{ steps.extract_keys.outputs.project_key }}"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history so that we can get the release branch names
          path: current_repo

      - name: Get release branch names
        id: get_release_branch_names
        run: |
          all_branches=$(git branch -r --format='%(refname:short)')
          release_branches=$(echo "$all_branches" | grep -E 'release/.*0$' | tr '\n' ',' | sed 's/,$//')
          echo "release_branches=$release_branches" >> $GITHUB_OUTPUT
        working-directory: current_repo

      - name: Log release branch names
        run: echo "Release branch names ${{ steps.get_release_branch_names.outputs.release_branches }}"

      # Prevent dependency conflicts
      - name: Delete current_repo
        run: rm -rf current_repo

      - name: Checkout code from macuject/.github repo
        uses: actions/checkout@v3
        with:
          repository: macuject/.github
          path: reusable

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install node-fetch dotenv
        working-directory: reusable

      - name: Run Release Version script
        run: node reusable/.github/workflows/release-version.mjs
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY: ${{ steps.extract_keys.outputs.issue_key }}
          PROJECT_KEY: ${{ steps.extract_keys.outputs.project_key }}
          GITHUB_RELEASE_BRANCHES: ${{ steps.get_release_branch_names.outputs.release_branches }}
          PR_BASE_BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: Run Comment on Jira Issue script
        run: node reusable/.github/workflows/comment-on-jira-issue.mjs
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
